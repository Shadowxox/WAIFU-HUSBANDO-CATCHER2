import random
import string
from telegram import Update
from telegram.ext import CommandHandler, CallbackContext
from telegram.constants import ParseMode
from shivu import application, sudo_users, collection, user_collection, PARTNER

# Runtime storage
last_usage_time = {}
generated_waifus = {}
claimed_waifus = {}

# Rarity mapping
RARITY_MAP = {
    1: "🔱 Rare",
    2: "🌀 Medium",
    3: "🦄 Legendary",
    4: "💮 Special Edition",
    5: "🔮 Limited Edition",
    6: "🎐 Celestial",
    7: "🔞 Erotic",
    8: "💞 Valentine Special",
    9: "🎭 X Verse",
    10: "🎃 Halloween Special",
    11: "❄️ Winter Special",
    12: "🌤️ Summer Special",
    13: "🎴 AMV",
    14: "🎥 Hollywood"
}

def generate_random_code():
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=5))

# /cgen command
async def waifugen(update: Update, context: CallbackContext):
    if str(update.effective_user.id) not in PARTNER:
        await update.message.reply_text("You are not authorized to use this command.")
        return

    try:
        waifu_id = context.args[0]
        quantity = int(context.args[1])
    except (IndexError, ValueError):
        await update.message.reply_text("Invalid usage. Usage: /cgen <id> <quantity>")
        return

    waifu = await collection.find_one({'id': waifu_id})
    if not waifu:
        await update.message.reply_text("Invalid waifu ID.")
        return

    code = generate_random_code()
    generated_waifus[code] = {'waifu': waifu, 'quantity': quantity}

    rarity_label = RARITY_MAP.get(waifu.get('rarity'), str(waifu.get('rarity')))
    response_text = (
        f"Generated character:\n`{code}`\n"
        f"Name: {waifu['name']}\nRarity: {rarity_label}\nQuantity: {quantity}\n"
        f"For redeem: /redeem {code}"
    )
    await update.message.reply_text(response_text, parse_mode=ParseMode.MARKDOWN)

    log_text = (
        f"Character generated by user {update.effective_user.id}:\n"
        f"Code: {code}\nName: {waifu['name']}\nRarity: {rarity_label}\nQuantity: {quantity}"
    )
    for log_user_id in PARTNER:
        await context.bot.send_message(chat_id=log_user_id, text=log_text)

# /redeem command
async def claimwaifu(update: Update, context: CallbackContext):
    code = " ".join(context.args)
    user_id = update.effective_user.id
    user_mention = f"[{update.effective_user.first_name}](tg://user?id={user_id})"

    if code in generated_waifus:
        details = generated_waifus[code]

        if user_id in claimed_waifus.get(code, []):
            await update.message.reply_text("You have already claimed this waifu code.")
            return

        if details['quantity'] > 0:
            waifu = await collection.find_one({'id': details['waifu']['id']})
            if not waifu:
                await update.message.reply_text("Waifu data not found.")
                return

            await user_collection.update_one(
                {'id': user_id},
                {'$push': {'characters': waifu}},
                upsert=True
            )

            details['quantity'] -= 1
            claimed_waifus.setdefault(code, []).append(user_id)

            if details['quantity'] == 0:
                del generated_waifus[code]
                del claimed_waifus[code]

            rarity_num = waifu.get('rarity')
            rarity_label = RARITY_MAP.get(rarity_num, str(rarity_num))
            caption = (
                f"Congratulations {user_mention}! You have received a new waifu for your harem 💍!\n"
                f"Name: {waifu['name']}\nRarity: {rarity_label}\nAnime: {waifu['anime']}"
            )

            media_url = waifu['img_url']
            if media_url.endswith(('.mp4', '.mov', '.webm')):
                await update.message.reply_video(video=media_url, caption=caption, parse_mode=ParseMode.MARKDOWN)
            else:
                await update.message.reply_photo(photo=media_url, caption=caption, parse_mode=ParseMode.MARKDOWN)

            log_text = (
                f"Waifu claimed by user {user_id}:\n"
                f"Code: {code}\nName: {waifu['name']}\nRarity: {rarity_label}\nRemaining quantity: {details['quantity']}"
            )
            for log_user_id in PARTNER:
                await context.bot.send_message(chat_id=log_user_id, text=log_text)
        else:
            await update.message.reply_text("This code has already been claimed the maximum number of times.")
    else:
        await update.message.reply_text("Invalid code.")

# /check command
async def check_waifu(update: Update, context: CallbackContext):
    try:
        waifu_id = context.args[0]
    except IndexError:
        await update.message.reply_text("Usage: /check <id>")
        return

    waifu = await collection.find_one({'id': waifu_id})
    if not waifu:
        await update.message.reply_text("Waifu not found.")
        return

    rarity_num = waifu.get('rarity')
    rarity_label = RARITY_MAP.get(rarity_num, str(rarity_num))

    mentions = []
    async for user in user_collection.find({'characters.id': waifu_id}):
        uid = user['id']
        name = user.get('name', 'User')
        mentions.append(f"[{name}](tg://user?id={uid})")

    owners_text = "No one has claimed this character yet."
    if mentions:
        owners_text = "**Obtained by:**\n" + "\n".join(mentions)

    caption = (
        f"**Name:** {waifu['name']}\n"
        f"**Anime:** {waifu['anime']}\n"
        f"**Rarity:** {rarity_label}\n\n"
        f"{owners_text}"
    )

    media_url = waifu['img_url']
    if media_url.endswith(('.mp4', '.mov', '.webm')):
        await update.message.reply_video(video=media_url, caption=caption, parse_mode=ParseMode.MARKDOWN)
    else:
        await update.message.reply_photo(photo=media_url, caption=caption, parse_mode=ParseMode.MARKDOWN)

# /total command
async def check_total_characters(update: Update, context: CallbackContext):
    try:
        total_characters = await collection.count_documents({})
        characters = collection.find({})
        result = f"Total Characters: {total_characters}\n\n"
        async for char in characters:
            rarity_label = RARITY_MAP.get(char.get('rarity'), str(char.get('rarity')))
            result += f"ID: {char['id']} | Name: {char['name']} | Rarity: {rarity_label}\n"
        await update.message.reply_text(result)
    except Exception as e:
        await update.message.reply_text(f"Error occurred: {e}")

# Add handlers
application.add_handler(CommandHandler("cgen", waifugen))
application.add_handler(CommandHandler("redeem", claimwaifu))
application.add_handler(CommandHandler("check", check_waifu))
application.add_handler(CommandHandler("total", check_total_characters))
