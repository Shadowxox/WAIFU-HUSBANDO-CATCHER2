import random
import string
import datetime
from telegram.ext import CommandHandler
from shivu import application, user_collection, PARTNER
last_usage_time = {}
generated_codes = {}


def generate_random_code():
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=5))

async def daily_code(update, context):
    user_id = update.effective_user.id


    if user_id in last_usage_time:
        last_time = last_usage_time[user_id]
        current_time = datetime.datetime.now()
        time_diff = current_time - last_time
        if time_diff.total_seconds() < 36000:
            await update.message.reply_text("⏳ 𝚃𝚑𝚒𝚜 𝚙𝚘𝚠𝚎𝚛𝚏𝚞𝚕 𝚌𝚘𝚖𝚖𝚊𝚗𝚍 𝚒𝚜 𝚕𝚒𝚖𝚒𝚝𝚎𝚍! 𝙰𝚟𝚊𝚒𝚕𝚊𝚋𝚕𝚎 𝚊𝚐𝚊𝚒𝚗 𝚒𝚗 𝟸𝟺 𝚑𝚘𝚞𝚛𝚜.")
            return

    code = generate_random_code()
    amount = random.randint(10, 4000)
    quantity = 1

    last_usage_time[user_id] = datetime.datetime.now()
    generated_codes[code] = {'amount': amount, 'quantity': quantity}

    response_text = (
        f"<b>Your daily coin code:</b>\n"
        f"<code>{code}</code>\n"
        f"<b>Amount:</b> {amount}\n"
        f"<b>Quantity:</b> {quantity}\n"
        f"<b>For redeem:</b> /credeem code"
    )
    await update.message.reply_html(response_text)

    log_text = (
        f"<b>Daily code generated by user {user_id}:</b>\n"
        f"<code>{code}</code>\n"
        f"<b>Amount:</b> {amount}\n"
        f"<b>Quantity:</b> {quantity}"
    )
    await context.bot.send_message(chat_id=PARTNER, text=log_text, parse_mode='HTML')

async def gen(update, context):
    if str(update.effective_user.id) not in PARTNER:
        await update.message.reply_text("You are not authorized to generate codes.")
        return

    try:
        amount = float(context.args[0])
        quantity = int(context.args[1])
    except (IndexError, ValueError):
        await update.message.reply_text("Invalid usage. Usage: /gen <amount> <quantity>")
        return

    code = generate_random_code()
    generated_codes[code] = {'amount': amount, 'quantity': quantity}

    response_text = (
        f"<b>Generated coin code:</b>\n"
        f"<code>{code}</code>\n"
        f"<b>Amount:</b> {amount}\n"
        f"<b>Quantity:</b> {quantity}\n"
        f"<b>For redeem:</b> /credeem code"
    )
    await update.message.reply_html(response_text)

    log_text = (
        f"<b>Code generated by user {update.effective_user.id}:</b>\n"
        f"<code>{code}</code>\n"
        f"<b>Amount:</b> {amount}\n"
        f"<b>Quantity:</b> {quantity}"
    )
    await context.bot.send_message(chat_id=PARTNER, text=log_text, parse_mode='HTML')

async def redeem(update, context):
    code = " ".join(context.args)
    user_id = update.effective_user.id


    if code in generated_codes:
        details = generated_codes[code]

        if details['quantity'] > 0:
            amount = details['amount']
            await user_collection.update_one(
                {'id': user_id},
                {'$inc': {'coins': float(amount)}}
            )

            details['quantity'] -= 1

            if details['quantity'] == 0:
                del generated_codes[code]

            await update.message.reply_text(
                f"Code redeemed successfully. {amount} coins added to your balance. Remaining quantity: {details['quantity']}"
            )

            log_text = (
                f"<b>Code redeemed by user {user_id}:</b>\n"
                f"<code>{code}</code>\n"
                f"<b>Amount:</b> {amount}\n"
                f"<b>Remaining quantity:</b> {details['quantity']}"
            )
            await context.bot.send_message(chat_id=PARTNER, text=log_text, parse_mode='HTML')
        else:
            await update.message.reply_text("This code has already been redeemed the maximum number of times.")
    else:
        await update.message.reply_text("Invalid Code")

application.add_handler(CommandHandler("dailycode", daily_code))
application.add_handler(CommandHandler("gen", gen))
application.add_handler(CommandHandler("credeem", redeem))
